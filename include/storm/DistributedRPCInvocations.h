/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DistributedRPCInvocations_H
#define DistributedRPCInvocations_H

#include <thrift/TDispatchProcessor.h>
#include "storm_types.h"



class DistributedRPCInvocationsIf {
 public:
  virtual ~DistributedRPCInvocationsIf() {}
  virtual void result(const std::string& id, const std::string& result) = 0;
  virtual void fetchRequest(DRPCRequest& _return, const std::string& functionName) = 0;
  virtual void failRequest(const std::string& id) = 0;
};

class DistributedRPCInvocationsIfFactory {
 public:
  typedef DistributedRPCInvocationsIf Handler;

  virtual ~DistributedRPCInvocationsIfFactory() {}

  virtual DistributedRPCInvocationsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DistributedRPCInvocationsIf* /* handler */) = 0;
};

class DistributedRPCInvocationsIfSingletonFactory : virtual public DistributedRPCInvocationsIfFactory {
 public:
  DistributedRPCInvocationsIfSingletonFactory(const boost::shared_ptr<DistributedRPCInvocationsIf>& iface) : iface_(iface) {}
  virtual ~DistributedRPCInvocationsIfSingletonFactory() {}

  virtual DistributedRPCInvocationsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DistributedRPCInvocationsIf* /* handler */) {}

 protected:
  boost::shared_ptr<DistributedRPCInvocationsIf> iface_;
};

class DistributedRPCInvocationsNull : virtual public DistributedRPCInvocationsIf {
 public:
  virtual ~DistributedRPCInvocationsNull() {}
  void result(const std::string& /* id */, const std::string& /* result */) {
    return;
  }
  void fetchRequest(DRPCRequest& /* _return */, const std::string& /* functionName */) {
    return;
  }
  void failRequest(const std::string& /* id */) {
    return;
  }
};

typedef struct _DistributedRPCInvocations_result_args__isset {
  _DistributedRPCInvocations_result_args__isset() : id(false), result(false) {}
  bool id :1;
  bool result :1;
} _DistributedRPCInvocations_result_args__isset;

class DistributedRPCInvocations_result_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DistributedRPCInvocations_result_args(const DistributedRPCInvocations_result_args&);
  DistributedRPCInvocations_result_args& operator=(const DistributedRPCInvocations_result_args&);
  DistributedRPCInvocations_result_args() : id(), result() {
  }

  virtual ~DistributedRPCInvocations_result_args() throw();
  std::string id;
  std::string result;

  _DistributedRPCInvocations_result_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_result(const std::string& val);

  bool operator == (const DistributedRPCInvocations_result_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_result_args& obj);
};


class DistributedRPCInvocations_result_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~DistributedRPCInvocations_result_pargs() throw();
  const std::string* id;
  const std::string* result;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_result_pargs& obj);
};

typedef struct _DistributedRPCInvocations_result_result__isset {
  _DistributedRPCInvocations_result_result__isset() : aze(false) {}
  bool aze :1;
} _DistributedRPCInvocations_result_result__isset;

class DistributedRPCInvocations_result_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  DistributedRPCInvocations_result_result(const DistributedRPCInvocations_result_result&);
  DistributedRPCInvocations_result_result& operator=(const DistributedRPCInvocations_result_result&);
  DistributedRPCInvocations_result_result() {
  }

  virtual ~DistributedRPCInvocations_result_result() throw();
  AuthorizationException aze;

  _DistributedRPCInvocations_result_result__isset __isset;

  void __set_aze(const AuthorizationException& val);

  bool operator == (const DistributedRPCInvocations_result_result & rhs) const
  {
    if (!(aze == rhs.aze))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_result_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_result_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_result_result& obj);
};

typedef struct _DistributedRPCInvocations_result_presult__isset {
  _DistributedRPCInvocations_result_presult__isset() : aze(false) {}
  bool aze :1;
} _DistributedRPCInvocations_result_presult__isset;

class DistributedRPCInvocations_result_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~DistributedRPCInvocations_result_presult() throw();
  AuthorizationException aze;

  _DistributedRPCInvocations_result_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_result_presult& obj);
};

typedef struct _DistributedRPCInvocations_fetchRequest_args__isset {
  _DistributedRPCInvocations_fetchRequest_args__isset() : functionName(false) {}
  bool functionName :1;
} _DistributedRPCInvocations_fetchRequest_args__isset;

class DistributedRPCInvocations_fetchRequest_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DistributedRPCInvocations_fetchRequest_args(const DistributedRPCInvocations_fetchRequest_args&);
  DistributedRPCInvocations_fetchRequest_args& operator=(const DistributedRPCInvocations_fetchRequest_args&);
  DistributedRPCInvocations_fetchRequest_args() : functionName() {
  }

  virtual ~DistributedRPCInvocations_fetchRequest_args() throw();
  std::string functionName;

  _DistributedRPCInvocations_fetchRequest_args__isset __isset;

  void __set_functionName(const std::string& val);

  bool operator == (const DistributedRPCInvocations_fetchRequest_args & rhs) const
  {
    if (!(functionName == rhs.functionName))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_fetchRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_fetchRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_fetchRequest_args& obj);
};


class DistributedRPCInvocations_fetchRequest_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DistributedRPCInvocations_fetchRequest_pargs() throw();
  const std::string* functionName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_fetchRequest_pargs& obj);
};

typedef struct _DistributedRPCInvocations_fetchRequest_result__isset {
  _DistributedRPCInvocations_fetchRequest_result__isset() : success(false), aze(false) {}
  bool success :1;
  bool aze :1;
} _DistributedRPCInvocations_fetchRequest_result__isset;

class DistributedRPCInvocations_fetchRequest_result {
 public:

  static const char* ascii_fingerprint; // = "C674841F2185EEC5D93B1AC23E6C600B";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x74,0x84,0x1F,0x21,0x85,0xEE,0xC5,0xD9,0x3B,0x1A,0xC2,0x3E,0x6C,0x60,0x0B};

  DistributedRPCInvocations_fetchRequest_result(const DistributedRPCInvocations_fetchRequest_result&);
  DistributedRPCInvocations_fetchRequest_result& operator=(const DistributedRPCInvocations_fetchRequest_result&);
  DistributedRPCInvocations_fetchRequest_result() {
  }

  virtual ~DistributedRPCInvocations_fetchRequest_result() throw();
  DRPCRequest success;
  AuthorizationException aze;

  _DistributedRPCInvocations_fetchRequest_result__isset __isset;

  void __set_success(const DRPCRequest& val);

  void __set_aze(const AuthorizationException& val);

  bool operator == (const DistributedRPCInvocations_fetchRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(aze == rhs.aze))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_fetchRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_fetchRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_fetchRequest_result& obj);
};

typedef struct _DistributedRPCInvocations_fetchRequest_presult__isset {
  _DistributedRPCInvocations_fetchRequest_presult__isset() : success(false), aze(false) {}
  bool success :1;
  bool aze :1;
} _DistributedRPCInvocations_fetchRequest_presult__isset;

class DistributedRPCInvocations_fetchRequest_presult {
 public:

  static const char* ascii_fingerprint; // = "C674841F2185EEC5D93B1AC23E6C600B";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x74,0x84,0x1F,0x21,0x85,0xEE,0xC5,0xD9,0x3B,0x1A,0xC2,0x3E,0x6C,0x60,0x0B};


  virtual ~DistributedRPCInvocations_fetchRequest_presult() throw();
  DRPCRequest* success;
  AuthorizationException aze;

  _DistributedRPCInvocations_fetchRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_fetchRequest_presult& obj);
};

typedef struct _DistributedRPCInvocations_failRequest_args__isset {
  _DistributedRPCInvocations_failRequest_args__isset() : id(false) {}
  bool id :1;
} _DistributedRPCInvocations_failRequest_args__isset;

class DistributedRPCInvocations_failRequest_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  DistributedRPCInvocations_failRequest_args(const DistributedRPCInvocations_failRequest_args&);
  DistributedRPCInvocations_failRequest_args& operator=(const DistributedRPCInvocations_failRequest_args&);
  DistributedRPCInvocations_failRequest_args() : id() {
  }

  virtual ~DistributedRPCInvocations_failRequest_args() throw();
  std::string id;

  _DistributedRPCInvocations_failRequest_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const DistributedRPCInvocations_failRequest_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_failRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_failRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_failRequest_args& obj);
};


class DistributedRPCInvocations_failRequest_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~DistributedRPCInvocations_failRequest_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_failRequest_pargs& obj);
};

typedef struct _DistributedRPCInvocations_failRequest_result__isset {
  _DistributedRPCInvocations_failRequest_result__isset() : aze(false) {}
  bool aze :1;
} _DistributedRPCInvocations_failRequest_result__isset;

class DistributedRPCInvocations_failRequest_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  DistributedRPCInvocations_failRequest_result(const DistributedRPCInvocations_failRequest_result&);
  DistributedRPCInvocations_failRequest_result& operator=(const DistributedRPCInvocations_failRequest_result&);
  DistributedRPCInvocations_failRequest_result() {
  }

  virtual ~DistributedRPCInvocations_failRequest_result() throw();
  AuthorizationException aze;

  _DistributedRPCInvocations_failRequest_result__isset __isset;

  void __set_aze(const AuthorizationException& val);

  bool operator == (const DistributedRPCInvocations_failRequest_result & rhs) const
  {
    if (!(aze == rhs.aze))
      return false;
    return true;
  }
  bool operator != (const DistributedRPCInvocations_failRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPCInvocations_failRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_failRequest_result& obj);
};

typedef struct _DistributedRPCInvocations_failRequest_presult__isset {
  _DistributedRPCInvocations_failRequest_presult__isset() : aze(false) {}
  bool aze :1;
} _DistributedRPCInvocations_failRequest_presult__isset;

class DistributedRPCInvocations_failRequest_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~DistributedRPCInvocations_failRequest_presult() throw();
  AuthorizationException aze;

  _DistributedRPCInvocations_failRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPCInvocations_failRequest_presult& obj);
};

class DistributedRPCInvocationsClient : virtual public DistributedRPCInvocationsIf {
 public:
  DistributedRPCInvocationsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DistributedRPCInvocationsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void result(const std::string& id, const std::string& result);
  void send_result(const std::string& id, const std::string& result);
  void recv_result();
  void fetchRequest(DRPCRequest& _return, const std::string& functionName);
  void send_fetchRequest(const std::string& functionName);
  void recv_fetchRequest(DRPCRequest& _return);
  void failRequest(const std::string& id);
  void send_failRequest(const std::string& id);
  void recv_failRequest();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DistributedRPCInvocationsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DistributedRPCInvocationsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DistributedRPCInvocationsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_failRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DistributedRPCInvocationsProcessor(boost::shared_ptr<DistributedRPCInvocationsIf> iface) :
    iface_(iface) {
    processMap_["result"] = &DistributedRPCInvocationsProcessor::process_result;
    processMap_["fetchRequest"] = &DistributedRPCInvocationsProcessor::process_fetchRequest;
    processMap_["failRequest"] = &DistributedRPCInvocationsProcessor::process_failRequest;
  }

  virtual ~DistributedRPCInvocationsProcessor() {}
};

class DistributedRPCInvocationsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DistributedRPCInvocationsProcessorFactory(const ::boost::shared_ptr< DistributedRPCInvocationsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DistributedRPCInvocationsIfFactory > handlerFactory_;
};

class DistributedRPCInvocationsMultiface : virtual public DistributedRPCInvocationsIf {
 public:
  DistributedRPCInvocationsMultiface(std::vector<boost::shared_ptr<DistributedRPCInvocationsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DistributedRPCInvocationsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DistributedRPCInvocationsIf> > ifaces_;
  DistributedRPCInvocationsMultiface() {}
  void add(boost::shared_ptr<DistributedRPCInvocationsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void result(const std::string& id, const std::string& result) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->result(id, result);
    }
    ifaces_[i]->result(id, result);
  }

  void fetchRequest(DRPCRequest& _return, const std::string& functionName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchRequest(_return, functionName);
    }
    ifaces_[i]->fetchRequest(_return, functionName);
    return;
  }

  void failRequest(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->failRequest(id);
    }
    ifaces_[i]->failRequest(id);
  }

};



#endif
