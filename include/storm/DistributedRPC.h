/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DistributedRPC_H
#define DistributedRPC_H

#include <thrift/TDispatchProcessor.h>
#include "storm_types.h"



class DistributedRPCIf {
 public:
  virtual ~DistributedRPCIf() {}
  virtual void execute(std::string& _return, const std::string& functionName, const std::string& funcArgs) = 0;
};

class DistributedRPCIfFactory {
 public:
  typedef DistributedRPCIf Handler;

  virtual ~DistributedRPCIfFactory() {}

  virtual DistributedRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DistributedRPCIf* /* handler */) = 0;
};

class DistributedRPCIfSingletonFactory : virtual public DistributedRPCIfFactory {
 public:
  DistributedRPCIfSingletonFactory(const boost::shared_ptr<DistributedRPCIf>& iface) : iface_(iface) {}
  virtual ~DistributedRPCIfSingletonFactory() {}

  virtual DistributedRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DistributedRPCIf* /* handler */) {}

 protected:
  boost::shared_ptr<DistributedRPCIf> iface_;
};

class DistributedRPCNull : virtual public DistributedRPCIf {
 public:
  virtual ~DistributedRPCNull() {}
  void execute(std::string& /* _return */, const std::string& /* functionName */, const std::string& /* funcArgs */) {
    return;
  }
};

typedef struct _DistributedRPC_execute_args__isset {
  _DistributedRPC_execute_args__isset() : functionName(false), funcArgs(false) {}
  bool functionName :1;
  bool funcArgs :1;
} _DistributedRPC_execute_args__isset;

class DistributedRPC_execute_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DistributedRPC_execute_args(const DistributedRPC_execute_args&);
  DistributedRPC_execute_args& operator=(const DistributedRPC_execute_args&);
  DistributedRPC_execute_args() : functionName(), funcArgs() {
  }

  virtual ~DistributedRPC_execute_args() throw();
  std::string functionName;
  std::string funcArgs;

  _DistributedRPC_execute_args__isset __isset;

  void __set_functionName(const std::string& val);

  void __set_funcArgs(const std::string& val);

  bool operator == (const DistributedRPC_execute_args & rhs) const
  {
    if (!(functionName == rhs.functionName))
      return false;
    if (!(funcArgs == rhs.funcArgs))
      return false;
    return true;
  }
  bool operator != (const DistributedRPC_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPC_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPC_execute_args& obj);
};


class DistributedRPC_execute_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~DistributedRPC_execute_pargs() throw();
  const std::string* functionName;
  const std::string* funcArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPC_execute_pargs& obj);
};

typedef struct _DistributedRPC_execute_result__isset {
  _DistributedRPC_execute_result__isset() : success(false), e(false), aze(false) {}
  bool success :1;
  bool e :1;
  bool aze :1;
} _DistributedRPC_execute_result__isset;

class DistributedRPC_execute_result {
 public:

  static const char* ascii_fingerprint; // = "49854EEF51738863052F2475D0A9B6AD";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x85,0x4E,0xEF,0x51,0x73,0x88,0x63,0x05,0x2F,0x24,0x75,0xD0,0xA9,0xB6,0xAD};

  DistributedRPC_execute_result(const DistributedRPC_execute_result&);
  DistributedRPC_execute_result& operator=(const DistributedRPC_execute_result&);
  DistributedRPC_execute_result() : success() {
  }

  virtual ~DistributedRPC_execute_result() throw();
  std::string success;
  DRPCExecutionException e;
  AuthorizationException aze;

  _DistributedRPC_execute_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const DRPCExecutionException& val);

  void __set_aze(const AuthorizationException& val);

  bool operator == (const DistributedRPC_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    if (!(aze == rhs.aze))
      return false;
    return true;
  }
  bool operator != (const DistributedRPC_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DistributedRPC_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPC_execute_result& obj);
};

typedef struct _DistributedRPC_execute_presult__isset {
  _DistributedRPC_execute_presult__isset() : success(false), e(false), aze(false) {}
  bool success :1;
  bool e :1;
  bool aze :1;
} _DistributedRPC_execute_presult__isset;

class DistributedRPC_execute_presult {
 public:

  static const char* ascii_fingerprint; // = "49854EEF51738863052F2475D0A9B6AD";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x85,0x4E,0xEF,0x51,0x73,0x88,0x63,0x05,0x2F,0x24,0x75,0xD0,0xA9,0xB6,0xAD};


  virtual ~DistributedRPC_execute_presult() throw();
  std::string* success;
  DRPCExecutionException e;
  AuthorizationException aze;

  _DistributedRPC_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const DistributedRPC_execute_presult& obj);
};

class DistributedRPCClient : virtual public DistributedRPCIf {
 public:
  DistributedRPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DistributedRPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void execute(std::string& _return, const std::string& functionName, const std::string& funcArgs);
  void send_execute(const std::string& functionName, const std::string& funcArgs);
  void recv_execute(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DistributedRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DistributedRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DistributedRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DistributedRPCProcessor(boost::shared_ptr<DistributedRPCIf> iface) :
    iface_(iface) {
    processMap_["execute"] = &DistributedRPCProcessor::process_execute;
  }

  virtual ~DistributedRPCProcessor() {}
};

class DistributedRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DistributedRPCProcessorFactory(const ::boost::shared_ptr< DistributedRPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DistributedRPCIfFactory > handlerFactory_;
};

class DistributedRPCMultiface : virtual public DistributedRPCIf {
 public:
  DistributedRPCMultiface(std::vector<boost::shared_ptr<DistributedRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DistributedRPCMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DistributedRPCIf> > ifaces_;
  DistributedRPCMultiface() {}
  void add(boost::shared_ptr<DistributedRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void execute(std::string& _return, const std::string& functionName, const std::string& funcArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(_return, functionName, funcArgs);
    }
    ifaces_[i]->execute(_return, functionName, funcArgs);
    return;
  }

};



#endif
